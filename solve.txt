"SQL importálása	
Web backend betöltése	
Csomagok frissítés VS Code-ban	
npm i
npm audit fix
npm i nodemon

package.json módosítása	""scripts"" résznél
""start"": ""nodemon backend.js""
indítás: npm start

package.json -> ""start"": ""nodemon backend.js""
      host: 'localhost',
      user: 'root',
      password: '',
      database: 'kelettravel2024'"
"app.use(express.urlencoded( { extended: true } ));

PHPmyAdmin, tábla beszúrás: SQL előnézete, copy

""app.post('/kapcsolatok', (req, res) => {
  const { nev, email, telefon, megjegyzes} = req.body;
  //console.log(nev, email, telefon, megjegyzes);

  kapcsolat();
  connection.query('INSERT INTO `kapcsolatfelvetel` (id, nev, email, telefon, megjegyzes) VALUES (NULL, ?, ?, ?, ?)', [nev, email, telefon, megjegyzes], (err, result) => {
    if (err) {
      return res.status(500).json('Hiba');
    }

    res.status(200).json('Sikeres felvitel');
    connection.end()
  });
});"""



"app.post('/celok', (req, res) => {
  const searching = req.body.searching;
  //console.log(searching);

  kapcsolat();
  connection.query('SELECT * FROM celok WHERE celok_nev LIKE ?', [`%${searching}%`], (err, result) => {
    if (err) {
      return res.status(500).json('Hiba');
    }

    res.status(200).json(result);
    connection.end();
  });
});"



"app.delete('/kapcsolatok/:id', (req, res) => {
  const id = req.params.id;
  //console.log(id);

  kapcsolat();

  connection.query('DELETE FROM kapcsolatfelvetel WHERE id = ?', [id], (err, result) => {
    if (err) {
      return res.status(500).json('Hiba');
    }

    res.status(200).json('Sikeres törlés');
    connection.end();
  })
});"



"http://localhost:3001/kapcsolatok
Headers: Content-Type, application/json
Body: x-www-form-urlencoded
nev: Teszt Elek
email: teszt@teszt.hu
telefon: 123456789
megjegyzes: minden mehet"



"New projekt
Console App (.Net Framework)
Place solution and project in the same directory

Project jobb egér gomb Add item/Class/Celok.cs
public class Celok

prop tab tab

        public int celok_id { get; set; }
        public string celok_nev { get; set; }
        public string celok_kep { get; set; }
        public string celok_kultura_honap { get; set; }
        public int celok_orszag { get; set; }"
"    public class Kapcsolatfelvetel
    {
        public int id { get; set; }
        public string nev { get; set; }
        public string email { get; set; }
        public string telefon { get; set; }
        public string megjegyzes { get; set; }
    }"
" public bool KetSzo()
	{            
	string[] tmp = celok_nev.Split();
            if (tmp.Length > 1)
            {
                return true;
            }
            else
            {
                return false;
            }
VAGY

        public bool KetSzo()
        {
            return celok_nev.Contains("" "");
        }"
"        public bool Hianyos
        {
            get
            {
                if (nev == """" || email == """" || telefon == """")
                {
                    return true;
                }
                else
                {
                    return false;
                }
            }
        }"
"Jobb oldalon, References/Add reference
két dll-t adjuk hozzá

Program.cs
using NetworkHelper;  beszúrása

namespace KeletTravelKonzolos
{
    class Program
    {
        static string host = ""http://localhost:3000"";
        static List<Celok> celokLista = Backend.GET($""{host}/celok"").Send().ToList<Celok>();
        static void Main(string[] args)
        {
            
            Console.ReadKey();
        }
    }
}"
"// 1. feladat
Console.WriteLine($""1. feladat: Az elérhető célok száma: {celokLista.Count()}"");"
"// 2. feladat
Console.WriteLine(""2. feladat: Egyszavas célok:"");
celokLista.Where(x => x.KetSzo() == false).ToList().ForEach(x => Console.WriteLine(x.celok_nev));"
"// 3. feladat
Console.Write(""3. feladat: Adj meg egy keresendő szót: "");
string keresendo = Console.ReadLine();"
"            // 3. feladat
            Console.Write(""3. feladat: Adj meg egy keresendő szót: "");
            string keresendo = Console.ReadLine();

            var talalat = celokLista.Where(x => x.celok_nev.Contains(keresendo)).Select(x => $""{x.celok_nev} {x.celok_kultura_honap}"").ToList();
            Console.WriteLine(""Találatok:"");
            talalat.ForEach(x => Console.WriteLine(x));
            Console.WriteLine($""Találatok száma: {talalat.Count()}"");"

"            // fájlba írás
            var tartalom = talalat.Prepend(""Talalatok: "").Append($""Találatok száma: {talalat.Count()}"");
            File.WriteAllLines($""{keresendo}.txt"", tartalom);"

"            // 4. feladat
            Console.WriteLine(""4. feladat"");
            celokLista.GroupBy(x => x.celok_kultura_honap).Select(x => new
            {
                honap = x.Key,
                db = x.Count()
            }).OrderByDescending(x => x.db).ToList().ForEach(x => Console.WriteLine($""{x.honap}: {x.db}""));

            Console.ReadKey();"



"Solution jobb egér gomb:
Add new project: WPF App (.Net framework)

Project/References/ Add references: 2 dll

using NetworkHelper;

Project/Add Existing item.../  megkeressük a Konzolosból az osztályokat (kapcsolatfelvétel és célok.cs)  és Add As Link

using KeletTravelKonzolos;"
"    public partial class MainWindow : Window
    {
        string host = ""http://localhost:3000"";
        public MainWindow()
        {
            InitializeComponent();
            
            lbCelok.DisplayMemberPath = ""celok_nev"";
        }
    }"

"        private void lbCelok_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            Celok cel = lbCelok.SelectedItem as Celok;
            lblCelNev.Content = cel.celok_nev;
            lblCelHonap.Content = cel.celok_kultura_honap;
        }"

"        private void btnFelvetel_Click(object sender, RoutedEventArgs e)
        {
            Kapcsolatfelvetel adatok = new Kapcsolatfelvetel() 
            {
                nev = tbNev.Text,
                email = tbEmail.Text,
                telefon = tbTelefon.Text,
                megjegyzes = tbMegjegyzes.Text
            };

            if (adatok.Hianyos)
            {
                MessageBox.Show(""Minden mező kitöltése kötlező!"");
            }
            else
            {
                string uzenet = Backend.POST($""{host}/kapcsolatok"").Body(adatok).Send().Message;
                MessageBox.Show(uzenet);
            }"





CTRL+H  replace: bg-secondary -> bg-primary
"col-md-6" -> "col-md-4"

" <li class=""nav-item""><a class=""nav-link rounded js-scroll-trigger"" href=""#keresendo"">Keresés</a>
                    </li>"
placeholder csere
"id=""kereses"" 
id=""keresendo"" 
id=""searchingButton"" 
type=""button"" onclick=""kereses()"""
"            <div class=""row"">
                <div class=""col-12"" id=""talalat"">
            </div>"
"type=""button"" onclick=""kapcsolat()"" 
    </form>  alá külön egy div
           <div id=""siker""></div>"
"stilus.css fájlban: 
#siker {
    font-size: 20px;
    font-weight: bold;
    margin-top: 10px;
}"
<textarea name="mesage" id="message" cols="63" rows="2" placeholder="Úti cél, vagy egyéb megjegyzés"></textarea>

megjegyzes:document.getElementById("message").value
"    fetch(""http://localhost:3000/kapcsolatok"", {
        method: ""POST"",
        body: JSON.stringify(bemenet),
        headers: {""Content-type"": ""application/json; charset=UTF-8""}
      }"
document.getElementById("siker").innerHTML = y;
index.html -> <body id="page-top" onload="uticelok()">
"alap.js:
async function uticelok() {
    const res = await fetch(""http://localhost:3000/celok"");
    const celok = await res.json();
    console.log(celok);

    let celokHTML = """";
    for (const cel of celok) {
        celokHTML += `
        <div class=""col-lg-4 ml-auto"">
            <img src=""kepek/${cel.celok_kep}"" alt=""${cel.celok_neve}"" class=""img-fluid"">
            <p class=""alairas"">${cel.celok_nev}</p>
        </div>
        `;
    }
    document.getElementById(""celok"").innerHTML = celokHTML;
}"




"async function kereses() {
    const searching = document.getElementById('keresendo').value;

    const res = await fetch('http://localhost:3000/celok', {
        method: ""POST"",
        headers: { ""Content-type"": ""application/json; charset=UTF-8"" },
        body: JSON.stringify({ searching })
    });
    const adatok = await res.json();

    let keresesHTML = ""ul"";
    for (const adat of adatok) {
        keresesHTML += `
                 <li class=""lista"">
                     <img src=""kepek/${adat.celok_kep}"" alt=""${adat.celok_nev}"" style=""width: 100px;"">
                     <span class=""kephez"">${adat.celok_nev}</span>
                 </li>
             `;
    }
    keresesHTML += ""</ul>"";
    document.getElementById(""talalat"").innerHTML = keresesHTML;
}"




